// Code generated by MockGen. DO NOT EDIT.
// Source: order.go

// Package mock is a generated GoMock package.
package mock

import (
	models "Dp-218_GO_micro/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepo) CreateOrder(user models.User, scooterID, startID, endID int, distance float64) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", user, scooterID, startID, endID, distance)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepoMockRecorder) CreateOrder(user, scooterID, startID, endID, distance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepo)(nil).CreateOrder), user, scooterID, startID, endID, distance)
}

// DeleteOrder mocks base method.
func (m *MockOrderRepo) DeleteOrder(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderRepoMockRecorder) DeleteOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderRepo)(nil).DeleteOrder), orderID)
}

// GetAllOrders mocks base method.
func (m *MockOrderRepo) GetAllOrders() (*models.OrderList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].(*models.OrderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderRepoMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderRepo)(nil).GetAllOrders))
}

// GetOrderByID mocks base method.
func (m *MockOrderRepo) GetOrderByID(orderID int) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", orderID)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderRepoMockRecorder) GetOrderByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderRepo)(nil).GetOrderByID), orderID)
}

// GetOrdersByScooterID mocks base method.
func (m *MockOrderRepo) GetOrdersByScooterID(scooterID int) (models.OrderList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByScooterID", scooterID)
	ret0, _ := ret[0].(models.OrderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByScooterID indicates an expected call of GetOrdersByScooterID.
func (mr *MockOrderRepoMockRecorder) GetOrdersByScooterID(scooterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByScooterID", reflect.TypeOf((*MockOrderRepo)(nil).GetOrdersByScooterID), scooterID)
}

// GetOrdersByUserID mocks base method.
func (m *MockOrderRepo) GetOrdersByUserID(userID int) (models.OrderList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", userID)
	ret0, _ := ret[0].(models.OrderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockOrderRepoMockRecorder) GetOrdersByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockOrderRepo)(nil).GetOrdersByUserID), userID)
}

// GetScooterMileageByID mocks base method.
func (m *MockOrderRepo) GetScooterMileageByID(scooterID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooterMileageByID", scooterID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooterMileageByID indicates an expected call of GetScooterMileageByID.
func (mr *MockOrderRepoMockRecorder) GetScooterMileageByID(scooterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooterMileageByID", reflect.TypeOf((*MockOrderRepo)(nil).GetScooterMileageByID), scooterID)
}

// GetUserMileageByID mocks base method.
func (m *MockOrderRepo) GetUserMileageByID(userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMileageByID", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMileageByID indicates an expected call of GetUserMileageByID.
func (mr *MockOrderRepoMockRecorder) GetUserMileageByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMileageByID", reflect.TypeOf((*MockOrderRepo)(nil).GetUserMileageByID), userID)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepo) UpdateOrder(orderID int, orderData models.Order) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", orderID, orderData)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepoMockRecorder) UpdateOrder(orderID, orderData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepo)(nil).UpdateOrder), orderID, orderData)
}
