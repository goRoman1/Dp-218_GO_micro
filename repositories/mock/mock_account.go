// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mock is a generated GoMock package.
package mock

import (
	models "Dp218GO/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountRepo is a mock of AccountRepo interface.
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo.
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance.
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// AddAccount mocks base method.
func (m *MockAccountRepo) AddAccount(account *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccount", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccount indicates an expected call of AddAccount.
func (mr *MockAccountRepoMockRecorder) AddAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccount", reflect.TypeOf((*MockAccountRepo)(nil).AddAccount), account)
}

// GetAccountByID mocks base method.
func (m *MockAccountRepo) GetAccountByID(accountID int) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", accountID)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockAccountRepoMockRecorder) GetAccountByID(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockAccountRepo)(nil).GetAccountByID), accountID)
}

// GetAccountByNumber mocks base method.
func (m *MockAccountRepo) GetAccountByNumber(number string) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByNumber", number)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByNumber indicates an expected call of GetAccountByNumber.
func (mr *MockAccountRepoMockRecorder) GetAccountByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByNumber", reflect.TypeOf((*MockAccountRepo)(nil).GetAccountByNumber), number)
}

// GetAccountsByOwner mocks base method.
func (m *MockAccountRepo) GetAccountsByOwner(user models.User) (*models.AccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByOwner", user)
	ret0, _ := ret[0].(*models.AccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByOwner indicates an expected call of GetAccountsByOwner.
func (mr *MockAccountRepoMockRecorder) GetAccountsByOwner(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByOwner", reflect.TypeOf((*MockAccountRepo)(nil).GetAccountsByOwner), user)
}

// UpdateAccount mocks base method.
func (m *MockAccountRepo) UpdateAccount(accountID int, accountData models.Account) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", accountID, accountData)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountRepoMockRecorder) UpdateAccount(accountID, accountData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountRepo)(nil).UpdateAccount), accountID, accountData)
}

// MockAccountTransactionRepo is a mock of AccountTransactionRepo interface.
type MockAccountTransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountTransactionRepoMockRecorder
}

// MockAccountTransactionRepoMockRecorder is the mock recorder for MockAccountTransactionRepo.
type MockAccountTransactionRepoMockRecorder struct {
	mock *MockAccountTransactionRepo
}

// NewMockAccountTransactionRepo creates a new mock instance.
func NewMockAccountTransactionRepo(ctrl *gomock.Controller) *MockAccountTransactionRepo {
	mock := &MockAccountTransactionRepo{ctrl: ctrl}
	mock.recorder = &MockAccountTransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountTransactionRepo) EXPECT() *MockAccountTransactionRepoMockRecorder {
	return m.recorder
}

// AddAccountTransaction mocks base method.
func (m *MockAccountTransactionRepo) AddAccountTransaction(accountTransaction *models.AccountTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountTransaction", accountTransaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountTransaction indicates an expected call of AddAccountTransaction.
func (mr *MockAccountTransactionRepoMockRecorder) AddAccountTransaction(accountTransaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountTransaction", reflect.TypeOf((*MockAccountTransactionRepo)(nil).AddAccountTransaction), accountTransaction)
}

// GetAccountTransactionByID mocks base method.
func (m *MockAccountTransactionRepo) GetAccountTransactionByID(transID int) (models.AccountTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTransactionByID", transID)
	ret0, _ := ret[0].(models.AccountTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTransactionByID indicates an expected call of GetAccountTransactionByID.
func (mr *MockAccountTransactionRepoMockRecorder) GetAccountTransactionByID(transID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTransactionByID", reflect.TypeOf((*MockAccountTransactionRepo)(nil).GetAccountTransactionByID), transID)
}

// GetAccountTransactions mocks base method.
func (m *MockAccountTransactionRepo) GetAccountTransactions(accounts ...models.Account) (*models.AccountTransactionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range accounts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountTransactions", varargs...)
	ret0, _ := ret[0].(*models.AccountTransactionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTransactions indicates an expected call of GetAccountTransactions.
func (mr *MockAccountTransactionRepoMockRecorder) GetAccountTransactions(accounts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTransactions", reflect.TypeOf((*MockAccountTransactionRepo)(nil).GetAccountTransactions), accounts...)
}

// GetAccountTransactionsByOrder mocks base method.
func (m *MockAccountTransactionRepo) GetAccountTransactionsByOrder(order models.Order) (*models.AccountTransactionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTransactionsByOrder", order)
	ret0, _ := ret[0].(*models.AccountTransactionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTransactionsByOrder indicates an expected call of GetAccountTransactionsByOrder.
func (mr *MockAccountTransactionRepoMockRecorder) GetAccountTransactionsByOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTransactionsByOrder", reflect.TypeOf((*MockAccountTransactionRepo)(nil).GetAccountTransactionsByOrder), order)
}

// GetAccountTransactionsByPaymentType mocks base method.
func (m *MockAccountTransactionRepo) GetAccountTransactionsByPaymentType(paymentType models.PaymentType, accounts ...models.Account) (*models.AccountTransactionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{paymentType}
	for _, a := range accounts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountTransactionsByPaymentType", varargs...)
	ret0, _ := ret[0].(*models.AccountTransactionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTransactionsByPaymentType indicates an expected call of GetAccountTransactionsByPaymentType.
func (mr *MockAccountTransactionRepoMockRecorder) GetAccountTransactionsByPaymentType(paymentType interface{}, accounts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{paymentType}, accounts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTransactionsByPaymentType", reflect.TypeOf((*MockAccountTransactionRepo)(nil).GetAccountTransactionsByPaymentType), varargs...)
}

// GetAccountTransactionsInTimePeriod mocks base method.
func (m *MockAccountTransactionRepo) GetAccountTransactionsInTimePeriod(start, end time.Time, accounts ...models.Account) (*models.AccountTransactionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{start, end}
	for _, a := range accounts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountTransactionsInTimePeriod", varargs...)
	ret0, _ := ret[0].(*models.AccountTransactionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTransactionsInTimePeriod indicates an expected call of GetAccountTransactionsInTimePeriod.
func (mr *MockAccountTransactionRepoMockRecorder) GetAccountTransactionsInTimePeriod(start, end interface{}, accounts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{start, end}, accounts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTransactionsInTimePeriod", reflect.TypeOf((*MockAccountTransactionRepo)(nil).GetAccountTransactionsInTimePeriod), varargs...)
}

// MockPaymentTypeRepo is a mock of PaymentTypeRepo interface.
type MockPaymentTypeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentTypeRepoMockRecorder
}

// MockPaymentTypeRepoMockRecorder is the mock recorder for MockPaymentTypeRepo.
type MockPaymentTypeRepoMockRecorder struct {
	mock *MockPaymentTypeRepo
}

// NewMockPaymentTypeRepo creates a new mock instance.
func NewMockPaymentTypeRepo(ctrl *gomock.Controller) *MockPaymentTypeRepo {
	mock := &MockPaymentTypeRepo{ctrl: ctrl}
	mock.recorder = &MockPaymentTypeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentTypeRepo) EXPECT() *MockPaymentTypeRepoMockRecorder {
	return m.recorder
}

// GetPaymentTypeById mocks base method.
func (m *MockPaymentTypeRepo) GetPaymentTypeById(paymentTypeID int) (models.PaymentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentTypeById", paymentTypeID)
	ret0, _ := ret[0].(models.PaymentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentTypeById indicates an expected call of GetPaymentTypeById.
func (mr *MockPaymentTypeRepoMockRecorder) GetPaymentTypeById(paymentTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentTypeById", reflect.TypeOf((*MockPaymentTypeRepo)(nil).GetPaymentTypeById), paymentTypeID)
}
