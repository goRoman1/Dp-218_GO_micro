// Code generated by MockGen. DO NOT EDIT.
// Source: scooter.go

// Package mock is a generated GoMock package.
package mock

import (
	models "Dp218GO/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScooterRepo is a mock of ScooterRepo interface.
type MockScooterRepo struct {
	ctrl     *gomock.Controller
	recorder *MockScooterRepoMockRecorder
}

// MockScooterRepoMockRecorder is the mock recorder for MockScooterRepo.
type MockScooterRepoMockRecorder struct {
	mock *MockScooterRepo
}

// NewMockScooterRepo creates a new mock instance.
func NewMockScooterRepo(ctrl *gomock.Controller) *MockScooterRepo {
	mock := &MockScooterRepo{ctrl: ctrl}
	mock.recorder = &MockScooterRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScooterRepo) EXPECT() *MockScooterRepoMockRecorder {
	return m.recorder
}

// CreateScooterStatusInRent mocks base method.
func (m *MockScooterRepo) CreateScooterStatusInRent(scooterID int) (models.ScooterStatusInRent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScooterStatusInRent", scooterID)
	ret0, _ := ret[0].(models.ScooterStatusInRent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScooterStatusInRent indicates an expected call of CreateScooterStatusInRent.
func (mr *MockScooterRepoMockRecorder) CreateScooterStatusInRent(scooterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScooterStatusInRent", reflect.TypeOf((*MockScooterRepo)(nil).CreateScooterStatusInRent), scooterID)
}

// GetAllScooters mocks base method.
func (m *MockScooterRepo) GetAllScooters() (*models.ScooterListDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllScooters")
	ret0, _ := ret[0].(*models.ScooterListDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllScooters indicates an expected call of GetAllScooters.
func (mr *MockScooterRepoMockRecorder) GetAllScooters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllScooters", reflect.TypeOf((*MockScooterRepo)(nil).GetAllScooters))
}

// GetAllScootersByStationID mocks base method.
func (m *MockScooterRepo) GetAllScootersByStationID(stationID int) (*models.ScooterListDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllScootersByStationID", stationID)
	ret0, _ := ret[0].(*models.ScooterListDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllScootersByStationID indicates an expected call of GetAllScootersByStationID.
func (mr *MockScooterRepoMockRecorder) GetAllScootersByStationID(stationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllScootersByStationID", reflect.TypeOf((*MockScooterRepo)(nil).GetAllScootersByStationID), stationID)
}

// GetScooterById mocks base method.
func (m *MockScooterRepo) GetScooterById(scooterId int) (models.ScooterDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooterById", scooterId)
	ret0, _ := ret[0].(models.ScooterDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooterById indicates an expected call of GetScooterById.
func (mr *MockScooterRepoMockRecorder) GetScooterById(scooterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooterById", reflect.TypeOf((*MockScooterRepo)(nil).GetScooterById), scooterId)
}

// GetScooterStatus mocks base method.
func (m *MockScooterRepo) GetScooterStatus(scooterID int) (models.ScooterStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooterStatus", scooterID)
	ret0, _ := ret[0].(models.ScooterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooterStatus indicates an expected call of GetScooterStatus.
func (mr *MockScooterRepoMockRecorder) GetScooterStatus(scooterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooterStatus", reflect.TypeOf((*MockScooterRepo)(nil).GetScooterStatus), scooterID)
}

// SendCurrentStatus mocks base method.
func (m *MockScooterRepo) SendCurrentStatus(id, stationID int, lat, lon, battery float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCurrentStatus", id, stationID, lat, lon, battery)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCurrentStatus indicates an expected call of SendCurrentStatus.
func (mr *MockScooterRepoMockRecorder) SendCurrentStatus(id, stationID, lat, lon, battery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCurrentStatus", reflect.TypeOf((*MockScooterRepo)(nil).SendCurrentStatus), id, stationID, lat, lon, battery)
}
