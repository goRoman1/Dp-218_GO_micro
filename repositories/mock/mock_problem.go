// Code generated by MockGen. DO NOT EDIT.
// Source: problem.go

// Package mock is a generated GoMock package.
package mock

import (
	models "Dp-218_GO_micro/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockProblemRepo is a mock of ProblemRepo interface.
type MockProblemRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProblemRepoMockRecorder
}

// MockProblemRepoMockRecorder is the mock recorder for MockProblemRepo.
type MockProblemRepoMockRecorder struct {
	mock *MockProblemRepo
}

// NewMockProblemRepo creates a new mock instance.
func NewMockProblemRepo(ctrl *gomock.Controller) *MockProblemRepo {
	mock := &MockProblemRepo{ctrl: ctrl}
	mock.recorder = &MockProblemRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemRepo) EXPECT() *MockProblemRepoMockRecorder {
	return m.recorder
}

// AddNewProblem mocks base method.
func (m *MockProblemRepo) AddNewProblem(problem *models.Problem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewProblem", problem)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewProblem indicates an expected call of AddNewProblem.
func (mr *MockProblemRepoMockRecorder) AddNewProblem(problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewProblem", reflect.TypeOf((*MockProblemRepo)(nil).AddNewProblem), problem)
}

// AddProblemComplexFields mocks base method.
func (m *MockProblemRepo) AddProblemComplexFields(problem *models.Problem, typeID, scooterID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProblemComplexFields", problem, typeID, scooterID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProblemComplexFields indicates an expected call of AddProblemComplexFields.
func (mr *MockProblemRepoMockRecorder) AddProblemComplexFields(problem, typeID, scooterID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblemComplexFields", reflect.TypeOf((*MockProblemRepo)(nil).AddProblemComplexFields), problem, typeID, scooterID, userID)
}

// GetAllProblemTypes mocks base method.
func (m *MockProblemRepo) GetAllProblemTypes() ([]models.ProblemType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProblemTypes")
	ret0, _ := ret[0].([]models.ProblemType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProblemTypes indicates an expected call of GetAllProblemTypes.
func (mr *MockProblemRepoMockRecorder) GetAllProblemTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProblemTypes", reflect.TypeOf((*MockProblemRepo)(nil).GetAllProblemTypes))
}

// GetProblemByID mocks base method.
func (m *MockProblemRepo) GetProblemByID(problemID int) (models.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemByID", problemID)
	ret0, _ := ret[0].(models.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemByID indicates an expected call of GetProblemByID.
func (mr *MockProblemRepoMockRecorder) GetProblemByID(problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemByID", reflect.TypeOf((*MockProblemRepo)(nil).GetProblemByID), problemID)
}

// GetProblemTypeByID mocks base method.
func (m *MockProblemRepo) GetProblemTypeByID(typeID int) (models.ProblemType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemTypeByID", typeID)
	ret0, _ := ret[0].(models.ProblemType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemTypeByID indicates an expected call of GetProblemTypeByID.
func (mr *MockProblemRepoMockRecorder) GetProblemTypeByID(typeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemTypeByID", reflect.TypeOf((*MockProblemRepo)(nil).GetProblemTypeByID), typeID)
}

// GetProblemsByBeingSolved mocks base method.
func (m *MockProblemRepo) GetProblemsByBeingSolved(solved bool) (*models.ProblemList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemsByBeingSolved", solved)
	ret0, _ := ret[0].(*models.ProblemList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemsByBeingSolved indicates an expected call of GetProblemsByBeingSolved.
func (mr *MockProblemRepoMockRecorder) GetProblemsByBeingSolved(solved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemsByBeingSolved", reflect.TypeOf((*MockProblemRepo)(nil).GetProblemsByBeingSolved), solved)
}

// GetProblemsByTimePeriod mocks base method.
func (m *MockProblemRepo) GetProblemsByTimePeriod(start, end time.Time) (*models.ProblemList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemsByTimePeriod", start, end)
	ret0, _ := ret[0].(*models.ProblemList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemsByTimePeriod indicates an expected call of GetProblemsByTimePeriod.
func (mr *MockProblemRepoMockRecorder) GetProblemsByTimePeriod(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemsByTimePeriod", reflect.TypeOf((*MockProblemRepo)(nil).GetProblemsByTimePeriod), start, end)
}

// GetProblemsByTypeID mocks base method.
func (m *MockProblemRepo) GetProblemsByTypeID(typeID int) (*models.ProblemList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemsByTypeID", typeID)
	ret0, _ := ret[0].(*models.ProblemList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemsByTypeID indicates an expected call of GetProblemsByTypeID.
func (mr *MockProblemRepoMockRecorder) GetProblemsByTypeID(typeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemsByTypeID", reflect.TypeOf((*MockProblemRepo)(nil).GetProblemsByTypeID), typeID)
}

// GetProblemsByUserID mocks base method.
func (m *MockProblemRepo) GetProblemsByUserID(userID int) (*models.ProblemList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemsByUserID", userID)
	ret0, _ := ret[0].(*models.ProblemList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemsByUserID indicates an expected call of GetProblemsByUserID.
func (mr *MockProblemRepoMockRecorder) GetProblemsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemsByUserID", reflect.TypeOf((*MockProblemRepo)(nil).GetProblemsByUserID), userID)
}

// MarkProblemAsSolved mocks base method.
func (m *MockProblemRepo) MarkProblemAsSolved(problem *models.Problem) (models.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProblemAsSolved", problem)
	ret0, _ := ret[0].(models.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkProblemAsSolved indicates an expected call of MarkProblemAsSolved.
func (mr *MockProblemRepoMockRecorder) MarkProblemAsSolved(problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProblemAsSolved", reflect.TypeOf((*MockProblemRepo)(nil).MarkProblemAsSolved), problem)
}

// MockSolutionRepo is a mock of SolutionRepo interface.
type MockSolutionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSolutionRepoMockRecorder
}

// MockSolutionRepoMockRecorder is the mock recorder for MockSolutionRepo.
type MockSolutionRepoMockRecorder struct {
	mock *MockSolutionRepo
}

// NewMockSolutionRepo creates a new mock instance.
func NewMockSolutionRepo(ctrl *gomock.Controller) *MockSolutionRepo {
	mock := &MockSolutionRepo{ctrl: ctrl}
	mock.recorder = &MockSolutionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSolutionRepo) EXPECT() *MockSolutionRepoMockRecorder {
	return m.recorder
}

// AddProblemSolution mocks base method.
func (m *MockSolutionRepo) AddProblemSolution(problemID int, solution *models.Solution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProblemSolution", problemID, solution)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProblemSolution indicates an expected call of AddProblemSolution.
func (mr *MockSolutionRepoMockRecorder) AddProblemSolution(problemID, solution interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblemSolution", reflect.TypeOf((*MockSolutionRepo)(nil).AddProblemSolution), problemID, solution)
}

// GetSolutionByProblem mocks base method.
func (m *MockSolutionRepo) GetSolutionByProblem(problem models.Problem) (models.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionByProblem", problem)
	ret0, _ := ret[0].(models.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionByProblem indicates an expected call of GetSolutionByProblem.
func (mr *MockSolutionRepoMockRecorder) GetSolutionByProblem(problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionByProblem", reflect.TypeOf((*MockSolutionRepo)(nil).GetSolutionByProblem), problem)
}

// GetSolutionsByProblems mocks base method.
func (m *MockSolutionRepo) GetSolutionsByProblems(problems models.ProblemList) (map[models.Problem]models.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionsByProblems", problems)
	ret0, _ := ret[0].(map[models.Problem]models.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionsByProblems indicates an expected call of GetSolutionsByProblems.
func (mr *MockSolutionRepoMockRecorder) GetSolutionsByProblems(problems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionsByProblems", reflect.TypeOf((*MockSolutionRepo)(nil).GetSolutionsByProblems), problems)
}
