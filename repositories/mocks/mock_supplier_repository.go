// Code generated by MockGen. DO NOT EDIT.
// Source: supplier.go

// Package mock is a generated GoMock package.
package mock

import (
	models "Dp218GO/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSupplierRepoI is a mock of SupplierRepoI interface.
type MockSupplierRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierRepoIMockRecorder
}

// MockSupplierRepoIMockRecorder is the mock recorder for MockSupplierRepoI.
type MockSupplierRepoIMockRecorder struct {
	mock *MockSupplierRepoI
}

// NewMockSupplierRepoI creates a new mock instance.
func NewMockSupplierRepoI(ctrl *gomock.Controller) *MockSupplierRepoI {
	mock := &MockSupplierRepoI{ctrl: ctrl}
	mock.recorder = &MockSupplierRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupplierRepoI) EXPECT() *MockSupplierRepoIMockRecorder {
	return m.recorder
}

// AddModel mocks base method.
func (m *MockSupplierRepoI) AddModel(modelData *models.ScooterModelDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddModel", modelData)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddModel indicates an expected call of AddModel.
func (mr *MockSupplierRepoIMockRecorder) AddModel(modelData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddModel", reflect.TypeOf((*MockSupplierRepoI)(nil).AddModel), modelData)
}

// AddSuppliersScooter mocks base method.
func (m *MockSupplierRepoI) AddSuppliersScooter(modelId int, scooter string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSuppliersScooter", modelId, scooter)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSuppliersScooter indicates an expected call of AddSuppliersScooter.
func (mr *MockSupplierRepoIMockRecorder) AddSuppliersScooter(modelId, scooter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSuppliersScooter", reflect.TypeOf((*MockSupplierRepoI)(nil).AddSuppliersScooter), modelId, scooter)
}

// ConvertToStruct mocks base method.
func (m *MockSupplierRepoI) ConvertToStruct(path string) []models.UploadedScooters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToStruct", path)
	ret0, _ := ret[0].([]models.UploadedScooters)
	return ret0
}

// ConvertToStruct indicates an expected call of ConvertToStruct.
func (mr *MockSupplierRepoIMockRecorder) ConvertToStruct(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToStruct", reflect.TypeOf((*MockSupplierRepoI)(nil).ConvertToStruct), path)
}

// DeleteSuppliersScooter mocks base method.
func (m *MockSupplierRepoI) DeleteSuppliersScooter(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSuppliersScooter", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSuppliersScooter indicates an expected call of DeleteSuppliersScooter.
func (mr *MockSupplierRepoIMockRecorder) DeleteSuppliersScooter(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuppliersScooter", reflect.TypeOf((*MockSupplierRepoI)(nil).DeleteSuppliersScooter), id)
}

// EditPrice mocks base method.
func (m *MockSupplierRepoI) EditPrice(modelData *models.ScooterModelDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPrice", modelData)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditPrice indicates an expected call of EditPrice.
func (mr *MockSupplierRepoIMockRecorder) EditPrice(modelData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPrice", reflect.TypeOf((*MockSupplierRepoI)(nil).EditPrice), modelData)
}

// GetModels mocks base method.
func (m *MockSupplierRepoI) GetModels() (*models.ScooterModelDTOList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModels")
	ret0, _ := ret[0].(*models.ScooterModelDTOList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels.
func (mr *MockSupplierRepoIMockRecorder) GetModels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockSupplierRepoI)(nil).GetModels))
}

// InsertToDb mocks base method.
func (m *MockSupplierRepoI) InsertToDb(modelId int, scooters []models.UploadedScooters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertToDb", modelId, scooters)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertToDb indicates an expected call of InsertToDb.
func (mr *MockSupplierRepoIMockRecorder) InsertToDb(modelId, scooters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToDb", reflect.TypeOf((*MockSupplierRepoI)(nil).InsertToDb), modelId, scooters)
}

// SelectModel mocks base method.
func (m *MockSupplierRepoI) SelectModel(id int) (*models.ScooterModelDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectModel", id)
	ret0, _ := ret[0].(*models.ScooterModelDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectModel indicates an expected call of SelectModel.
func (mr *MockSupplierRepoIMockRecorder) SelectModel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectModel", reflect.TypeOf((*MockSupplierRepoI)(nil).SelectModel), id)
}
